version: '2'

services:
  postgres:
    image: postgres:11.6
    volumes:
      - ./api/volumes_postgres/volumes_postgres:/var/lib/postgresql/data
  api:
    container_name: '${API_NAME}'
    network_mode: '${API_NETWORK}'
    restart: always
    env_file: infrastructure/api-configuration/dev-secrets
    image: api
    build:
      context: ./api
      dockerfile: Dockerfile.local
      args:
        PORT: '${API_PORT}'
    environment:
      DEV_HOST: 'http://localhost:${API_PORT}'
    command: >
      bash -c 'python wait_for_postgres.py &&
               ./manage.py migrate &&
               ./manage.py runserver 0.0.0.0:${API_PORT}'
    volumes:
      - ./api:/home/user/code
      - '${HOME}/.aws:/home/user/.aws:ro'
    depends_on:
      - client
      - postgres
  client:
    image: node:14.15
    ports:
      - '${API_PORT}:${API_PORT}'
      - '${STORYBOOK_PORT}:${STORYBOOK_PORT}'
      - '${CLIENT_PORT}:${CLIENT_PORT}'
    environment:
      STAGE_API_VERSION: '${STAGE_API_VERSION}'
      STAGE_API_HOST: 'http://localhost:${API_PORT}'
      STAGE_SENTRY_DSN: '${STAGE_SENTRY_DSN}'
      STAGE_SENTRY_ENV: '${STAGE_SENTRY_ENV}'
      STORYBOOK_PORT: '${STORYBOOK_PORT}'
      HUBSPOT_PORTAL_ID: '${STAGE_HUBSPOT_PORTAL_ID}'
      HUBSPOT_EMAIL_LIST_ID: '${STAGE_HUBSPOT_EMAIL_LIST_ID}'

    command: >
      bash -c 'cd /home/user/code &&
               yarn &&
               (yarn storybook --quiet -p ${STORYBOOK_PORT} &
               yarn dev -p ${CLIENT_PORT})'
    volumes:
      - ./client:/home/user/code
      - ./client/node_modules:/home/user/code/node_modules
      - ./client/.next:/home/user/code/.next
