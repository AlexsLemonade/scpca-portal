#!/usr/bin/env python3

import argparse
import os
import subprocess
from pathlib import Path
from enum import Enum


class Colors(Enum):
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    RESET = "\033[0m"  # Resets to default color


def print_color(msg, color: Colors = Colors.GREEN):
    print(f"{color.value}{msg}{Colors.RESET.value}")


# Exit if not called from project root.
if not Path("bin/sportal").exists():
    print("Please call sportal from the project's root")
    exit(1)

# Use the correct .env file by default.
docker_compose = ["docker", "compose", "--env-file", "./docker-compose.env"]
run_api = docker_compose + ["run", "--rm", "api"]
manage_py = run_api + ["python3", "manage.py"]

# List of available commands.
commands = {
    "up": docker_compose + ["up"],
    "down": docker_compose + ["down"],
    "build": docker_compose + ["build"],
    "shell": manage_py + ["shell"],
    "recreate-schema": [
        "./recreate_schema.sh"
    ],  # this should be imported unless something else uses it
    "test-api": run_api + ["bash", "./run_tests.sh"],
    "makemigrations": manage_py + ["makemigrations", "scpca_portal"],
    "migrate": manage_py + ["migrate"],
    "showmigrations": manage_py + ["showmigrations"],
    "postgres-cli": ["/run_psql_client.sh"],
    "graph-models": manage_py + ["graph_models", "scpca_portal", ">", "models.dot"],
    "run-api": run_api,
    "manage-api": manage_py,
    "create-portal-metadata": manage_py + ["create_portal_metadata"],
    "load-data": manage_py + ["load_data"],
    "load-metadata": manage_py + ["load_metadata"],
    "generate-computed-files": manage_py + ["generate_computed_files"],
    "sync-original-files": manage_py + ["sync_original_files"],
    "run-black": ["black", "--line-length=100", "--exclude=volumes_postgres", "."],
    "env": ["cat", "./docker-compose.env"],
    "configure-aws-cli": manage_py + ["configure_aws_cli"],
}

parser = argparse.ArgumentParser(
    usage="sportal [--sso PROFILE_NAME] [command] [...comman_args]] [--help]",
    description="ScPCA Portal Helper Commands. Expected to be called from project root.",
)
parser.formatter_class = lambda prog: argparse.RawTextHelpFormatter(
    prog, max_help_position=10
)
parser.add_argument("--sso", help="The AWS SSO profile to use for this command")
parser.add_argument(
    "command",
    metavar="command",
    help='\n'.join(commands.keys()),
)
parser.add_argument(
    "command_args",
    nargs=argparse.REMAINDER,
    help="Any additional arguments will be passed to the command.",
)


def get_aws_env_from_profile(profile: str, merge: bool = True) -> dict:
    """
    Takes an AWS SSO Profile as a string.
    Returns a dictionary of the profile credentials as env dict.
    """
    env = {}

    if merge:
        print("Attempting to merge AWS SSO credentials with current session envars.")
        env = os.environ.copy()

    cmd = f"aws configure export-credentials --profile {profile} --format env-no-export"
    p = subprocess.Popen(
        cmd,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )

    code = p.wait()

    if stdout := p.stdout:
        output = stdout.read().decode("UTF-8")

    if code != 0:
        print(f"Failed getting credentials with: {cmd}")
        print(f"Failed with output: {output.strip()}")
        if code == 255:
            print_color(
                f"You may need to login with: aws sso login --profile {profile}",
                Colors.RED,
            )
        exit(code)

    for line in output.split("\n"):
        if line:
            key, value = line.split("=", 1)
            env[key] = value
    return env


if __name__ == "__main__":
    args = parser.parse_args()
    env = os.environ.copy()

    if args.sso:
        print("Will attept to use AWS SSO Profile:", args.sso)
        env = get_aws_env_from_profile(args.sso)
        print_color("Successfully read AWS SSO credentials.", Colors.GREEN)
    else:
        print("Running command with no AWS SSO Profile.")

    if command := commands.get(args.command):
        cmd = command + args.command_args

        print("Executing command:", " ".join(cmd))

        try:
            p = subprocess.Popen(cmd, env=env)
            code = p.wait()

            if code != 0:
                print("Command encountered error.")

            exit(code)
        except Exception as e:
            print_color(e, Colors.RED)
            exit(1)

    print("Unknown Command:", args.command)
    exit(1)
